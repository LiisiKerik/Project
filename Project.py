#############################################################################################################################
from copy import *
from math import *
def Adj_Det():
  return([Adj_Det_Berkowitz])
def Adj_Det_Berkowitz(x):
  n = len(x)
  if n == 0:
    return(([], 1))
  elif n == 1:
    return([[1]], -x[0][0])
  else:
    n = len(x)
    c = Characteristic_Berkowitz_2(n, x)
    p = Powers(range(n), n - 1, x)
    a = Sum(range(n), range(n), [Multiply_scalar_matrix(c[i + 2], p[i]) for i in range(n - 2)] + [p[n - 2]])
    for i in range(n):
      a[i][i] += c[1]
    return((a, c[0]))
def Adj_Det_tests():
  return(
    [
      ([], ([], 1)),
      ([[-1]], ([[1]], 1)),
      ([[0]], ([[1]], 0)),
      ([[1]], ([[1]], -1)),
      ([[-1, -1], [-1, -1]], ([[1, -1], [-1, 1]], 0)),
      ([[-1, -1], [-1, 0]], ([[0, -1], [-1, 1]], -1)),
      ([[-1, -1], [-1, 1]], ([[-1, -1], [-1, 1]], -2)),
      ([[-1, -1], [0, -1]], ([[1, -1], [0, 1]], 1)),
      ([[-1, -1], [0, 0]], ([[0, -1], [0, 1]], 0)),
      ([[-1, -1], [0, 1]], ([[-1, -1], [0, 1]], -1)),
      ([[-1, -1], [1, -1]], ([[1, -1], [1, 1]], 2)),
      ([[-1, -1], [1, 0]], ([[0, -1], [1, 1]], 1)),
      ([[-1, -1], [1, 1]], ([[-1, -1], [1, 1]], 0)),
      ([[-1, 0], [-1, -1]], ([[1, 0], [-1, 1]], 1)),
      ([[-1, 0], [-1, 0]], ([[0, 0], [-1, 1]], 0)),
      ([[-1, 0], [-1, 1]], ([[-1, 0], [-1, 1]], -1)),
      ([[-1, 0], [0, -1]], ([[1, 0], [0, 1]], 1)),
      ([[-1, 0], [0, 0]], ([[0, 0], [0, 1]], 0)),
      ([[-1, 0], [0, 1]], ([[-1, 0], [0, 1]], -1)),
      ([[-1, 0], [1, -1]], ([[1, 0], [1, 1]], 1)),
      ([[-1, 0], [1, 0]], ([[0, 0], [1, 1]], 0)),
      ([[-1, 0], [1, 1]], ([[-1, 0], [1, 1]], -1)),
      ([[-1, 1], [-1, -1]], ([[1, 1], [-1, 1]], 2)),
      ([[-1, 1], [-1, 0]], ([[0, 1], [-1, 1]], 1)),
      ([[-1, 1], [-1, 1]], ([[-1, 1], [-1, 1]], 0)),
      ([[-1, 1], [0, -1]], ([[1, 1], [0, 1]], 1)),
      ([[-1, 1], [0, 0]], ([[0, 1], [0, 1]], 0)),
      ([[-1, 1], [0, 1]], ([[-1, 1], [0, 1]], -1)),
      ([[-1, 1], [1, -1]], ([[1, 1], [1, 1]], 0)),
      ([[-1, 1], [1, 0]], ([[0, 1], [1, 1]], -1)),
      ([[-1, 1], [1, 1]], ([[-1, 1], [1, 1]], -2)),
      ([[0, -1], [-1, -1]], ([[1, -1], [-1, 0]], -1)),
      ([[0, -1], [-1, 0]], ([[0, -1], [-1, 0]], -1)),
      ([[0, -1], [-1, 1]], ([[-1, -1], [-1, 0]], -1)),
      ([[0, -1], [0, -1]], ([[1, -1], [0, 0]], 0)),
      ([[0, -1], [0, 0]], ([[0, -1], [0, 0]], 0)),
      ([[0, -1], [0, 1]], ([[-1, -1], [0, 0]], 0)),
      ([[0, -1], [1, -1]], ([[1, -1], [1, 0]], 1)),
      ([[0, -1], [1, 0]], ([[0, -1], [1, 0]], 1)),
      ([[0, -1], [1, 1]], ([[-1, -1], [1, 0]], 1)),
      ([[0, 0], [-1, -1]], ([[1, 0], [-1, 0]], 0)),
      ([[0, 0], [-1, 0]], ([[0, 0], [-1, 0]], 0)),
      ([[0, 0], [-1, 1]], ([[-1, 0], [-1, 0]], 0)),
      ([[0, 0], [0, -1]], ([[1, 0], [0, 0]], 0)),
      ([[0, 0], [0, 0]], ([[0, 0], [0, 0]], 0)),
      ([[0, 0], [0, 1]], ([[-1, 0], [0, 0]], 0)),
      ([[0, 0], [1, -1]], ([[1, 0], [1, 0]], 0)),
      ([[0, 0], [1, 0]], ([[0, 0], [1, 0]], 0)),
      ([[0, 0], [1, 1]], ([[-1, 0], [1, 0]], 0)),
      ([[0, 1], [-1, -1]], ([[1, 1], [-1, 0]], 1)),
      ([[0, 1], [-1, 0]], ([[0, 1], [-1, 0]], 1)),
      ([[0, 1], [-1, 1]], ([[-1, 1], [-1, 0]], 1)),
      ([[0, 1], [0, -1]], ([[1, 1], [0, 0]], 0)),
      ([[0, 1], [0, 0]], ([[0, 1], [0, 0]], 0)),
      ([[0, 1], [0, 1]], ([[-1, 1], [0, 0]], 0)),
      ([[0, 1], [1, -1]], ([[1, 1], [1, 0]], -1)),
      ([[0, 1], [1, 0]], ([[0, 1], [1, 0]], -1)),
      ([[0, 1], [1, 1]], ([[-1, 1], [1, 0]], -1)),
      ([[1, -1], [-1, -1]], ([[1, -1], [-1, -1]], -2)),
      ([[1, -1], [-1, 0]], ([[0, -1], [-1, -1]], -1)),
      ([[1, -1], [-1, 1]], ([[-1, -1], [-1, -1]], 0)),
      ([[1, -1], [0, -1]], ([[1, -1], [0, -1]], -1)),
      ([[1, -1], [0, 0]], ([[0, -1], [0, -1]], 0)),
      ([[1, -1], [0, 1]], ([[-1, -1], [0, -1]], 1)),
      ([[1, -1], [1, -1]], ([[1, -1], [1, -1]], 0)),
      ([[1, -1], [1, 0]], ([[0, -1], [1, -1]], 1)),
      ([[1, -1], [1, 1]], ([[-1, -1], [1, -1]], 2)),
      ([[1, 0], [-1, -1]], ([[1, 0], [-1, -1]], -1)),
      ([[1, 0], [-1, 0]], ([[0, 0], [-1, -1]], 0)),
      ([[1, 0], [-1, 1]], ([[-1, 0], [-1, -1]], 1)),
      ([[1, 0], [0, -1]], ([[1, 0], [0, -1]], -1)),
      ([[1, 0], [0, 0]], ([[0, 0], [0, -1]], 0)),
      ([[1, 0], [0, 1]], ([[-1, 0], [0, -1]], 1)),
      ([[1, 0], [1, -1]], ([[1, 0], [1, -1]], -1)),
      ([[1, 0], [1, 0]], ([[0, 0], [1, -1]], 0)),
      ([[1, 0], [1, 1]], ([[-1, 0], [1, -1]], 1)),
      ([[1, 1], [-1, -1]], ([[1, 1], [-1, -1]], 0)),
      ([[1, 1], [-1, 0]], ([[0, 1], [-1, -1]], 1)),
      ([[1, 1], [-1, 1]], ([[-1, 1], [-1, -1]], 2)),
      ([[1, 1], [0, -1]], ([[1, 1], [0, -1]], -1)),
      ([[1, 1], [0, 0]], ([[0, 1], [0, -1]], 0)),
      ([[1, 1], [0, 1]], ([[-1, 1], [0, -1]], 1)),
      ([[1, 1], [1, -1]], ([[1, 1], [1, -1]], -2)),
      ([[1, 1], [1, 0]], ([[0, 1], [1, -1]], -1)),
      ([[1, 1], [1, 1]], ([[-1, 1], [1, -1]], 0)),
      ([[1, 2, 5], [4, 1, 7], [3, 3, 7]], ([[-14, 1, 9], [-7, -8, 13], [9, 3, -7]], -17)),
      (
        [[3, 2, 1, 5], [1, 2, 5, 2], [9, 4, 1, 7], [2, 3, 3, 7]],
        ([[45, 10, -5, -30], [-209, -34, 49, 110], [53, 18, -13, -30], [54, 4, -14, -20]], -40))])
def Characteristic():
  return([Characteristic_Berkowitz])
def Characteristic_Berkowitz(x):
  if x == []:
    return([])
  else:
    return(Characteristic_Berkowitz_1(len(x), x))
def Characteristic_Berkowitz_1(n, x):
  return([-x[0][0]] if n == 1 else Characteristic_Berkowitz_2(n, x))
def Characteristic_Berkowitz_2(n, x):
  Element = x[0][0]
  Row = x[0][1 :]
  Column = [y[0] for y in x[1 :]]
  Matrix = [y[1 :] for y in x[1 :]]
  c = Characteristic_Berkowitz_1(n - 1, Matrix)
  p =\
    (
      [Element, Multiply_vector_vector(range(n - 1), Row, Column)] +
      [
        Multiply_vector_matrix_vector(range(n - 1), range(n - 1), Row, y, Column)
        for y in Powers(range(n - 1), n - 2, Matrix)])
  a = [sum([p[j] * c[i + j] for j in range(n - 1 - i)]) + p[n - 1 - i] for i in range(n)]
  return([-a[0]] + [c[i - 1] - a[i] for i in range(1, n)])
def Characteristic_tests():
  return(
    [
      ([], []),
      ([[-1]], [1]),
      ([[0]], [0]),
      ([[1]], [-1]),
      ([[-1, -1], [-1, -1]], [0, 2]),
      ([[-1, -1], [-1, 0]], [-1, 1]),
      ([[-1, -1], [-1, 1]], [-2, 0]),
      ([[-1, -1], [0, -1]], [1, 2]),
      ([[-1, -1], [0, 0]], [0, 1]),
      ([[-1, -1], [0, 1]], [-1, 0]),
      ([[-1, -1], [1, -1]], [2, 2]),
      ([[-1, -1], [1, 0]], [1, 1]),
      ([[-1, -1], [1, 1]], [0, 0]),
      ([[-1, 0], [-1, -1]], [1, 2]),
      ([[-1, 0], [-1, 0]], [0, 1]),
      ([[-1, 0], [-1, 1]], [-1, 0]),
      ([[-1, 0], [0, -1]], [1, 2]),
      ([[-1, 0], [0, 0]], [0, 1]),
      ([[-1, 0], [0, 1]], [-1, 0]),
      ([[-1, 0], [1, -1]], [1, 2]),
      ([[-1, 0], [1, 0]], [0, 1]),
      ([[-1, 0], [1, 1]], [-1, 0]),
      ([[-1, 1], [-1, -1]], [2, 2]),
      ([[-1, 1], [-1, 0]], [1, 1]),
      ([[-1, 1], [-1, 1]], [0, 0]),
      ([[-1, 1], [0, -1]], [1, 2]),
      ([[-1, 1], [0, 0]], [0, 1]),
      ([[-1, 1], [0, 1]], [-1, 0]),
      ([[-1, 1], [1, -1]], [0, 2]),
      ([[-1, 1], [1, 0]], [-1, 1]),
      ([[-1, 1], [1, 1]], [-2, 0]),
      ([[0, -1], [-1, -1]], [-1, 1]),
      ([[0, -1], [-1, 0]], [-1, 0]),
      ([[0, -1], [-1, 1]], [-1, -1]),
      ([[0, -1], [0, -1]], [0, 1]),
      ([[0, -1], [0, 0]], [0, 0]),
      ([[0, -1], [0, 1]], [0, -1]),
      ([[0, -1], [1, -1]], [1, 1]),
      ([[0, -1], [1, 0]], [1, 0]),
      ([[0, -1], [1, 1]], [1, -1]),
      ([[0, 0], [-1, -1]], [0, 1]),
      ([[0, 0], [-1, 0]], [0, 0]),
      ([[0, 0], [-1, 1]], [0, -1]),
      ([[0, 0], [0, -1]], [0, 1]),
      ([[0, 0], [0, 0]], [0, 0]),
      ([[0, 0], [0, 1]], [0, -1]),
      ([[0, 0], [1, -1]], [0, 1]),
      ([[0, 0], [1, 0]], [0, 0]),
      ([[0, 0], [1, 1]], [0, -1]),
      ([[0, 1], [-1, -1]], [1, 1]),
      ([[0, 1], [-1, 0]], [1, 0]),
      ([[0, 1], [-1, 1]], [1, -1]),
      ([[0, 1], [0, -1]], [0, 1]),
      ([[0, 1], [0, 0]], [0, 0]),
      ([[0, 1], [0, 1]], [0, -1]),
      ([[0, 1], [1, -1]], [-1, 1]),
      ([[0, 1], [1, 0]], [-1, 0]),
      ([[0, 1], [1, 1]], [-1, -1]),
      ([[1, -1], [-1, -1]], [-2, 0]),
      ([[1, -1], [-1, 0]], [-1, -1]),
      ([[1, -1], [-1, 1]], [0, -2]),
      ([[1, -1], [0, -1]], [-1, 0]),
      ([[1, -1], [0, 0]], [0, -1]),
      ([[1, -1], [0, 1]], [1, -2]),
      ([[1, -1], [1, -1]], [0, 0]),
      ([[1, -1], [1, 0]], [1, -1]),
      ([[1, -1], [1, 1]], [2, -2]),
      ([[1, 0], [-1, -1]], [-1, 0]),
      ([[1, 0], [-1, 0]], [0, -1]),
      ([[1, 0], [-1, 1]], [1, -2]),
      ([[1, 0], [0, -1]], [-1, 0]),
      ([[1, 0], [0, 0]], [0, -1]),
      ([[1, 0], [0, 1]], [1, -2]),
      ([[1, 0], [1, -1]], [-1, 0]),
      ([[1, 0], [1, 0]], [0, -1]),
      ([[1, 0], [1, 1]], [1, -2]),
      ([[1, 1], [-1, -1]], [0, 0]),
      ([[1, 1], [-1, 0]], [1, -1]),
      ([[1, 1], [-1, 1]], [2, -2]),
      ([[1, 1], [0, -1]], [-1, 0]),
      ([[1, 1], [0, 0]], [0, -1]),
      ([[1, 1], [0, 1]], [1, -2]),
      ([[1, 1], [1, -1]], [-2, 0]),
      ([[1, 1], [1, 0]], [-1, -1]),
      ([[1, 1], [1, 1]], [0, -2]),
      ([[1, 2, 5], [4, 1, 7], [3, 3, 7]], [-17, -29, -9]),
      ([[3, 2, 1, 5], [1, 2, 5, 2], [9, 4, 1, 7], [2, 3, 3, 7]], [-40, -22, -15, -13])])
def Det():
  return([Det_Berkowitz, Det_Gaussian_elimination])
def Det_Berkowitz(x):
  if x == []:
    return(1)
  else:
    n = len(x)
    (a, d) = Adj_Det_Berkowitz([y[1 :] for y in x[1 :]])
    r = x[0][0] * d + Multiply_vector_matrix_vector(range(n - 1), range(n - 1), x[0][1 :], a, [y[0] for y in x[1 :]])
    return(-r if n % 2 == 0 else r)
def Det_Gaussian_elimination(x):
  n = len(x)
  Det = 1
  for i in range(n):
    Nonzero = False
    for j in range(i, n):
      if x[j][i] != 0:
        Nonzero = True
        if j != i:
          Det = -Det
          for k in range(i, n):
            x[i][k], x[j][k] = x[j][k], x[i][k]
        break
    if Nonzero:
      Pivot = x[i][i]
      Det *= Pivot
      Inv_pivot = 1 / Pivot
      for j in range(i + 1, n):
        x[i][j] *= Inv_pivot
      for j in range(i + 1, n):
        for k in range(i + 1, n):
          x[j][k] -= x[j][i] * x[i][k]
    else:
      return(0)
  return(Det)
def Det_tests():
  return(
    [
      ([], 1),
      ([[-1]], -1),
      ([[0]], 0),
      ([[1]], 1),
      ([[-1, -1], [-1, -1]], 0),
      ([[-1, -1], [-1, 0]], -1),
      ([[-1, -1], [-1, 1]], -2),
      ([[-1, -1], [0, -1]], 1),
      ([[-1, -1], [0, 0]], 0),
      ([[-1, -1], [0, 1]], -1),
      ([[-1, -1], [1, -1]], 2),
      ([[-1, -1], [1, 0]], 1),
      ([[-1, -1], [1, 1]], 0),
      ([[-1, 0], [-1, -1]], 1),
      ([[-1, 0], [-1, 0]], 0),
      ([[-1, 0], [-1, 1]], -1),
      ([[-1, 0], [0, -1]], 1),
      ([[-1, 0], [0, 0]], 0),
      ([[-1, 0], [0, 1]], -1),
      ([[-1, 0], [1, -1]], 1),
      ([[-1, 0], [1, 0]], 0),
      ([[-1, 0], [1, 1]], -1),
      ([[-1, 1], [-1, -1]], 2),
      ([[-1, 1], [-1, 0]], 1),
      ([[-1, 1], [-1, 1]], 0),
      ([[-1, 1], [0, -1]], 1),
      ([[-1, 1], [0, 0]], 0),
      ([[-1, 1], [0, 1]], -1),
      ([[-1, 1], [1, -1]], 0),
      ([[-1, 1], [1, 0]], -1),
      ([[-1, 1], [1, 1]], -2),
      ([[0, -1], [-1, -1]], -1),
      ([[0, -1], [-1, 0]], -1),
      ([[0, -1], [-1, 1]], -1),
      ([[0, -1], [0, -1]], 0),
      ([[0, -1], [0, 0]], 0),
      ([[0, -1], [0, 1]], 0),
      ([[0, -1], [1, -1]], 1),
      ([[0, -1], [1, 0]], 1),
      ([[0, -1], [1, 1]], 1),
      ([[0, 0], [-1, -1]], 0),
      ([[0, 0], [-1, 0]], 0),
      ([[0, 0], [-1, 1]], 0),
      ([[0, 0], [0, -1]], 0),
      ([[0, 0], [0, 0]], 0),
      ([[0, 0], [0, 1]], 0),
      ([[0, 0], [1, -1]], 0),
      ([[0, 0], [1, 0]], 0),
      ([[0, 0], [1, 1]], 0),
      ([[0, 1], [-1, -1]], 1),
      ([[0, 1], [-1, 0]], 1),
      ([[0, 1], [-1, 1]], 1),
      ([[0, 1], [0, -1]], 0),
      ([[0, 1], [0, 0]], 0),
      ([[0, 1], [0, 1]], 0),
      ([[0, 1], [1, -1]], -1),
      ([[0, 1], [1, 0]], -1),
      ([[0, 1], [1, 1]], -1),
      ([[1, -1], [-1, -1]], -2),
      ([[1, -1], [-1, 0]], -1),
      ([[1, -1], [-1, 1]], 0),
      ([[1, -1], [0, -1]], -1),
      ([[1, -1], [0, 0]], 0),
      ([[1, -1], [0, 1]], 1),
      ([[1, -1], [1, -1]], 0),
      ([[1, -1], [1, 0]], 1),
      ([[1, -1], [1, 1]], 2),
      ([[1, 0], [-1, -1]], -1),
      ([[1, 0], [-1, 0]], 0),
      ([[1, 0], [-1, 1]], 1),
      ([[1, 0], [0, -1]], -1),
      ([[1, 0], [0, 0]], 0),
      ([[1, 0], [0, 1]], 1),
      ([[1, 0], [1, -1]], -1),
      ([[1, 0], [1, 0]], 0),
      ([[1, 0], [1, 1]], 1),
      ([[1, 1], [-1, -1]], 0),
      ([[1, 1], [-1, 0]], 1),
      ([[1, 1], [-1, 1]], 2),
      ([[1, 1], [0, -1]], -1),
      ([[1, 1], [0, 0]], 0),
      ([[1, 1], [0, 1]], 1),
      ([[1, 1], [1, -1]], -2),
      ([[1, 1], [1, 0]], -1),
      ([[1, 1], [1, 1]], 0),
      ([[1, 2, 5], [4, 1, 7], [3, 3, 7]], 17),
      ([[3, 2, 1, 5], [1, 2, 5, 2], [9, 4, 1, 7], [2, 3, 3, 7]], -40)])
def Div(x, y):
  return([[w / y for w in z] for z in x])
def Equal_matrix(x, y):
  for i in range(len(x)):
    for j in range(len(x[0])):
      if not(Equal_scalar(x[i][j], y[i][j])):
        return(False)
  return(True)
def Equal_matrix_scalar(x, y):
  (a, b) = x
  (c, d) = y
  return(Equal_matrix(a, c) and Equal_scalar(b, d))
def Equal_maybe_matrix(x, y):
  return(y == None if x == None else False if y == None else Equal_matrix(x, y))
def Equal_scalar(x, y):
  return(Round(x) == Round(y))
def Equal_vector(x, y):
  return(x == y)
def Functions():
  return(
    [
      (Adj_Det(), Adj_Det_tests(), Equal_matrix_scalar),
      (Characteristic(), Characteristic_tests(), Equal_vector),
      (Det(), Det_tests(), Equal_scalar),
      (Inv(), Inv_tests(), Equal_maybe_matrix)])
def Identity(n):
  return([[1 if j == i else 0 for j in n] for i in n])
def Inv():
  return([Inv_Berkowitz, Inv_Gaussian_elimination])
def Inv_Berkowitz(x):
  (a, d) = Adj_Det_Berkowitz(x)
  return(None if d == 0 else Div(a, -d))
def Inv_Gaussian_elimination(x):
  n = len(x)
  Inverse = Identity(range(n))
  for i in range(n):
    Nonzero = False
    for j in range(i, n):
      if x[j][i] != 0:
        Nonzero = True
        if j != i:
          for k in range(i, n):
            x[i][k], x[j][k] = x[j][k], x[i][k]
          for k in range(n):
            Inverse[i][k], Inverse[j][k] = Inverse[j][k], Inverse[i][k]
        break
    if Nonzero:
      Inv_pivot = 1 / x[i][i]
      for j in range(i + 1, n):
        x[i][j] *= Inv_pivot
      for j in range(n):
        Inverse[i][j] *= Inv_pivot
      for j in list(range(i)) + list(range(i + 1, n)):
        for k in range(i + 1, n):
          x[j][k] -= x[j][i] * x[i][k]
        for k in range(n):
          Inverse[j][k] -= x[j][i] * Inverse[i][k]
    else:
      return(None)
  return(Inverse)
def Inv_tests():
  return(
    [
      ([], []),
      ([[-1]], [[-1]]),
      ([[0]], None),
      ([[1]], [[1]]),
      ([[-1, -1], [-1, -1]], None),
      ([[-1, -1], [-1, 0]], [[0, -1], [-1, 1]]),
      ([[-1, -1], [-1, 1]], [[-0.5, -0.5], [-0.5, 0.5]]),
      ([[-1, -1], [0, -1]], [[-1, 1], [0, -1]]),
      ([[-1, -1], [0, 0]], None),
      ([[-1, -1], [0, 1]], [[-1, -1], [0, 1]]),
      ([[-1, -1], [1, -1]], [[-0.5, 0.5], [-0.5, -0.5]]),
      ([[-1, -1], [1, 0]], [[0, 1], [-1, -1]]),
      ([[-1, -1], [1, 1]], None),
      ([[-1, 0], [-1, -1]], [[-1, 0], [1, -1]]),
      ([[-1, 0], [-1, 0]], None),
      ([[-1, 0], [-1, 1]], [[-1, 0], [-1, 1]]),
      ([[-1, 0], [0, -1]], [[-1, 0], [0, -1]]),
      ([[-1, 0], [0, 0]], None),
      ([[-1, 0], [0, 1]], [[-1, 0], [0, 1]]),
      ([[-1, 0], [1, -1]], [[-1, 0], [-1, -1]]),
      ([[-1, 0], [1, 0]], None),
      ([[-1, 0], [1, 1]], [[-1, 0], [1, 1]]),
      ([[-1, 1], [-1, -1]], [[-0.5, -0.5], [0.5, -0.5]]),
      ([[-1, 1], [-1, 0]], [[0, -1], [1, -1]]),
      ([[-1, 1], [-1, 1]], None),
      ([[-1, 1], [0, -1]], [[-1, -1], [0, -1]]),
      ([[-1, 1], [0, 0]], None),
      ([[-1, 1], [0, 1]], [[-1, 1], [0, 1]]),
      ([[-1, 1], [1, -1]], None),
      ([[-1, 1], [1, 0]], [[0, 1], [1, 1]]),
      ([[-1, 1], [1, 1]], [[-0.5, 0.5], [0.5, 0.5]]),
      ([[0, -1], [-1, -1]], [[1, -1], [-1, 0]]),
      ([[0, -1], [-1, 0]], [[0, -1], [-1, 0]]),
      ([[0, -1], [-1, 1]], [[-1, -1], [-1, 0]]),
      ([[0, -1], [0, -1]], None),
      ([[0, -1], [0, 0]], None),
      ([[0, -1], [0, 1]], None),
      ([[0, -1], [1, -1]], [[-1, 1], [-1, 0]]),
      ([[0, -1], [1, 0]], [[0, 1], [-1, 0]]),
      ([[0, -1], [1, 1]], [[1, 1], [-1, 0]]),
      ([[0, 0], [-1, -1]], None),
      ([[0, 0], [-1, 0]], None),
      ([[0, 0], [-1, 1]], None),
      ([[0, 0], [0, -1]], None),
      ([[0, 0], [0, 0]], None),
      ([[0, 0], [0, 1]], None),
      ([[0, 0], [1, -1]], None),
      ([[0, 0], [1, 0]], None),
      ([[0, 0], [1, 1]], None),
      ([[0, 1], [-1, -1]], [[-1, -1], [1, 0]]),
      ([[0, 1], [-1, 0]], [[0, -1], [1, 0]]),
      ([[0, 1], [-1, 1]], [[1, -1], [1, 0]]),
      ([[0, 1], [0, -1]], None),
      ([[0, 1], [0, 0]], None),
      ([[0, 1], [0, 1]], None),
      ([[0, 1], [1, -1]], [[1, 1], [1, 0]]),
      ([[0, 1], [1, 0]], [[0, 1], [1, 0]]),
      ([[0, 1], [1, 1]], [[-1, 1], [1, 0]]),
      ([[1, -1], [-1, -1]], [[0.5, -0.5], [-0.5, -0.5]]),
      ([[1, -1], [-1, 0]], [[0, -1], [-1, -1]]),
      ([[1, -1], [-1, 1]], None),
      ([[1, -1], [0, -1]], [[1, -1], [0, -1]]),
      ([[1, -1], [0, 0]], None),
      ([[1, -1], [0, 1]], [[1, 1], [0, 1]]),
      ([[1, -1], [1, -1]], None),
      ([[1, -1], [1, 0]], [[0, 1], [-1, 1]]),
      ([[1, -1], [1, 1]], [[0.5, 0.5], [-0.5, 0.5]]),
      ([[1, 0], [-1, -1]], [[1, 0], [-1, -1]]),
      ([[1, 0], [-1, 0]], None),
      ([[1, 0], [-1, 1]], [[1, 0], [1, 1]]),
      ([[1, 0], [0, -1]], [[1, 0], [0, -1]]),
      ([[1, 0], [0, 0]], None),
      ([[1, 0], [0, 1]], [[1, 0], [0, 1]]),
      ([[1, 0], [1, -1]], [[1, 0], [1, -1]]),
      ([[1, 0], [1, 0]], None),
      ([[1, 0], [1, 1]], [[1, 0], [-1, 1]]),
      ([[1, 1], [-1, -1]], None),
      ([[1, 1], [-1, 0]], [[0, -1], [1, 1]]),
      ([[1, 1], [-1, 1]], [[0.5, -0.5], [0.5, 0.5]]),
      ([[1, 1], [0, -1]], [[1, 1], [0, -1]]),
      ([[1, 1], [0, 0]], None),
      ([[1, 1], [0, 1]], [[1, -1], [0, 1]]),
      ([[1, 1], [1, -1]], [[0.5, 0.5], [0.5, -0.5]]),
      ([[1, 1], [1, 0]], [[0, 1], [1, -1]]),
      ([[1, 1], [1, 1]], None),
      ([[1, 2, 5], [4, 1, 7], [3, 3, 7]], Div([[-14, 1, 9], [-7, -8, 13], [9, 3, -7]], 17)),
      (
        [[3, 2, 1, 5], [1, 2, 5, 2], [9, 4, 1, 7], [2, 3, 3, 7]],
        [
          [1.125, 0.25, -0.125, -0.75],
          [-5.225, -0.85, 1.225, 2.75],
          [1.325, 0.45, -0.325, -0.75],
          [1.35, 0.1, -0.35, -0.5]])])
def Multiply_matrix_matrix(l, m, n, x, y):
  return([[sum([x[i][k] * y[k][j] for k in m]) for j in n] for i in l])
def Multiply_scalar_matrix(x, y):
  return([[x * w for w in z] for z in y])
def Multiply_vector_matrix(m, n, x, y):
  return([sum([x[j] * y[j][i] for j in m]) for i in n])
def Multiply_vector_matrix_vector(m, n, x, y, z):
  return(Multiply_vector_vector(n, Multiply_vector_matrix(m, n, x, y), z))
def Multiply_vector_vector(n, x, y):
  return(sum([x[i] * y[i] for i in n]))
def Negate(m, n, x):
  return([[-x[i][j] for j in n] for i in m])
def Powers(m, n, x):
  Result = [None for _ in range(n)]
  if n != 0:
    Result[0] = x
    for i in range(n - 1):
      Result[i + 1] = Multiply_matrix_matrix(m, m, m, x, Result[i])
  return(Result)
def Round(x):
  return(0 if x == 0 else -Round_1(-x) if x < 0 else Round_1(x))
def Round_1(x):
  if x < 10000:
    i = 0
    while 10 ** i * x < 1000:
      i += 1
  else:
    i = -1
    while 10 ** i * x >= 10000:
      i -= 1
  y = int(floor(10 ** i * x))
  return((y // 10 + y % 10 // 5) / 10 ** (i - 1))
def Sum(m, n, x):
  return([[sum([y[i][j] for y in x]) for j in n] for i in m])
def Test(f, Test_cases, Equality):
  print(f.__name__)
  for (x, y) in Test_cases:
    z = deepcopy(x)
    w = f(x)
    if not(Equality(w, y)):
      print((z, y, w))
def Tests():
  for (f, Test_cases, Equality) in Functions():
    for g in f:
      Test(g, Test_cases, Equality)
Tests()
#############################################################################################################################