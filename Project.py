#############################################################################################################################
from copy import *
def Characteristic_Berkowitz(x):
  n = len(x)
  if n == 0:
    return([])
  else:
    Element = x[0][0]
    if n == 1:
      return([Element])
    else:
      Row = x[0][1 :]
      Column = [y[0] for y in x[1 :]]
      Minor = [y[1 :] for y in x[1 :]]
      Characteristic_minor = Characteristic_Berkowitz(Minor)
      Powers_minor =\
        [Element, Multiply_vector_vector(range(n - 1), Row, Column)] + [Multiply_vector_matrix_vector(range(n - 1), range(n - 1), Row, y, Column) for y in Powers(n - 1, n - 2, Minor)]
      
def Det():
  return([Det_Berkowitz, Det_Gaussian_elimination])
# def Det_Berkowitz(x):
#   if x == []:
#     return(1)
#   else:
#     Element = x[0][0]
#     Row = x[0][1 :]
#     Column = [y[0] for y in x[1 :]]
#     Minor = [y[1 :] for y in x[1 :]]
#     Characteristic_minor = Characteristic_Berkowitz(Minor)
#     Powers_minor = []
def Det_Gaussian_elimination(x):
  n = len(x)
  Det = 1
  for i in range(n):
    Nonzero = False
    for j in range(i, n):
      if x[j][i] != 0:
        Nonzero = True
        if j != i:
          Det = -Det
          for k in range(i, n):
            x[i][k], x[j][k] = x[j][k], x[i][k]
        break
    if Nonzero:
      Pivot = x[i][i]
      Det *= Pivot
      Inv_pivot = 1 / Pivot
      for j in range(i + 1, n):
        x[i][j] *= Inv_pivot
      for j in range(i + 1, n):
        for k in range(i + 1, n):
          x[j][k] -= x[j][i] * x[i][k]
    else:
      return(0)
  return(Det)
def Det_test_cases():
  return(
    [
      ([], 1),
      ([[-1]], -1),
      ([[0]], 0),
      ([[1]], 1),
      ([[-1, -1], [-1, -1]], 0),
      ([[-1, -1], [-1, 0]], -1),
      ([[-1, -1], [-1, 1]], -2),
      ([[-1, -1], [0, -1]], 1),
      ([[-1, -1], [0, 0]], 0),
      ([[-1, -1], [0, 1]], -1),
      ([[-1, -1], [1, -1]], 2),
      ([[-1, -1], [1, 0]], 1),
      ([[-1, -1], [1, 1]], 0),
      ([[-1, 0], [-1, -1]], 1),
      ([[-1, 0], [-1, 0]], 0),
      ([[-1, 0], [-1, 1]], -1),
      ([[-1, 0], [0, -1]], 1),
      ([[-1, 0], [0, 0]], 0),
      ([[-1, 0], [0, 1]], -1),
      ([[-1, 0], [1, -1]], 1),
      ([[-1, 0], [1, 0]], 0),
      ([[-1, 0], [1, 1]], -1),
      ([[-1, 1], [-1, -1]], 2),
      ([[-1, 1], [-1, 0]], 1),
      ([[-1, 1], [-1, 1]], 0),
      ([[-1, 1], [0, -1]], 1),
      ([[-1, 1], [0, 0]], 0),
      ([[-1, 1], [0, 1]], -1),
      ([[-1, 1], [1, -1]], 0),
      ([[-1, 1], [1, 0]], -1),
      ([[-1, 1], [1, 1]], -2),
      ([[0, -1], [-1, -1]], -1),
      ([[0, -1], [-1, 0]], -1),
      ([[0, -1], [-1, 1]], -1),
      ([[0, -1], [0, -1]], 0),
      ([[0, -1], [0, 0]], 0),
      ([[0, -1], [0, 1]], 0),
      ([[0, -1], [1, -1]], 1),
      ([[0, -1], [1, 0]], 1),
      ([[0, -1], [1, 1]], 1),
      ([[0, 0], [-1, -1]], 0),
      ([[0, 0], [-1, 0]], 0),
      ([[0, 0], [-1, 1]], 0),
      ([[0, 0], [0, -1]], 0),
      ([[0, 0], [0, 0]], 0),
      ([[0, 0], [0, 1]], 0),
      ([[0, 0], [1, -1]], 0),
      ([[0, 0], [1, 0]], 0),
      ([[0, 0], [1, 1]], 0),
      ([[0, 1], [-1, -1]], 1),
      ([[0, 1], [-1, 0]], 1),
      ([[0, 1], [-1, 1]], 1),
      ([[0, 1], [0, -1]], 0),
      ([[0, 1], [0, 0]], 0),
      ([[0, 1], [0, 1]], 0),
      ([[0, 1], [1, -1]], -1),
      ([[0, 1], [1, 0]], -1),
      ([[0, 1], [1, 1]], -1),
      ([[1, -1], [-1, -1]], -2),
      ([[1, -1], [-1, 0]], -1),
      ([[1, -1], [-1, 1]], 0),
      ([[1, -1], [0, -1]], -1),
      ([[1, -1], [0, 0]], 0),
      ([[1, -1], [0, 1]], 1),
      ([[1, -1], [1, -1]], 0),
      ([[1, -1], [1, 0]], 1),
      ([[1, -1], [1, 1]], 2),
      ([[1, 0], [-1, -1]], -1),
      ([[1, 0], [-1, 0]], 0),
      ([[1, 0], [-1, 1]], 1),
      ([[1, 0], [0, -1]], -1),
      ([[1, 0], [0, 0]], 0),
      ([[1, 0], [0, 1]], 1),
      ([[1, 0], [1, -1]], -1),
      ([[1, 0], [1, 0]], 0),
      ([[1, 0], [1, 1]], 1),
      ([[1, 1], [-1, -1]], 0),
      ([[1, 1], [-1, 0]], 1),
      ([[1, 1], [-1, 1]], 2),
      ([[1, 1], [0, -1]], -1),
      ([[1, 1], [0, 0]], 0),
      ([[1, 1], [0, 1]], 1),
      ([[1, 1], [1, -1]], -2),
      ([[1, 1], [1, 0]], -1),
      ([[1, 1], [1, 1]], 0),
      ([[1, 2, 5], [4, 1, 7], [3, 3, 7]], 17)])
def Div(x, y):
  return([[w / y for w in z] for z in x])
def Functions():
  return([(Det(), Det_test_cases()), (Inv(), Inv_test_cases())])
def Identity(n):
  return([[1 if j == i else 0 for j in n] for i in n])
def Inv():
  return([Inv_Gaussian_elimination])
def Inv_Gaussian_elimination(x):
  n = len(x)
  Inverse = Identity(range(n))
  for i in range(n):
    Nonzero = False
    for j in range(i, n):
      if x[j][i] != 0:
        Nonzero = True
        if j != i:
          for k in range(i, n):
            x[i][k], x[j][k] = x[j][k], x[i][k]
          for k in range(n):
            Inverse[i][k], Inverse[j][k] = Inverse[j][k], Inverse[i][k]
        break
    if Nonzero:
      Inv_pivot = 1 / x[i][i]
      for j in range(i + 1, n):
        x[i][j] *= Inv_pivot
      for j in range(n):
        Inverse[i][j] *= Inv_pivot
      for j in list(range(i)) + list(range(i + 1, n)):
        for k in range(i + 1, n):
          x[j][k] -= x[j][i] * x[i][k]
        for k in range(n):
          Inverse[j][k] -= x[j][i] * Inverse[i][k]
    else:
      return(None)
  return(Inverse)
def Inv_test_cases():
  return(
    [
      ([], []),
      ([[-1]], [[-1]]),
      ([[0]], None),
      ([[1]], [[1]]),
      ([[-1, -1], [-1, -1]], None),
      ([[-1, -1], [-1, 0]], [[0, -1], [-1, 1]]),
      ([[-1, -1], [-1, 1]], [[-0.5, -0.5], [-0.5, 0.5]]),
      ([[-1, -1], [0, -1]], [[-1, 1], [0, -1]]),
      ([[-1, -1], [0, 0]], None),
      ([[-1, -1], [0, 1]], [[-1, -1], [0, 1]]),
      ([[-1, -1], [1, -1]], [[-0.5, 0.5], [-0.5, -0.5]]),
      ([[-1, -1], [1, 0]], [[0, 1], [-1, -1]]),
      ([[-1, -1], [1, 1]], None),
      ([[-1, 0], [-1, -1]], [[-1, 0], [1, -1]]),
      ([[-1, 0], [-1, 0]], None),
      ([[-1, 0], [-1, 1]], [[-1, 0], [-1, 1]]),
      ([[-1, 0], [0, -1]], [[-1, 0], [0, -1]]),
      ([[-1, 0], [0, 0]], None),
      ([[-1, 0], [0, 1]], [[-1, 0], [0, 1]]),
      ([[-1, 0], [1, -1]], [[-1, 0], [-1, -1]]),
      ([[-1, 0], [1, 0]], None),
      ([[-1, 0], [1, 1]], [[-1, 0], [1, 1]]),
      ([[-1, 1], [-1, -1]], [[-0.5, -0.5], [0.5, -0.5]]),
      ([[-1, 1], [-1, 0]], [[0, -1], [1, -1]]),
      ([[-1, 1], [-1, 1]], None),
      ([[-1, 1], [0, -1]], [[-1, -1], [0, -1]]),
      ([[-1, 1], [0, 0]], None),
      ([[-1, 1], [0, 1]], [[-1, 1], [0, 1]]),
      ([[-1, 1], [1, -1]], None),
      ([[-1, 1], [1, 0]], [[0, 1], [1, 1]]),
      ([[-1, 1], [1, 1]], [[-0.5, 0.5], [0.5, 0.5]]),
      ([[0, -1], [-1, -1]], [[1, -1], [-1, 0]]),
      ([[0, -1], [-1, 0]], [[0, -1], [-1, 0]]),
      ([[0, -1], [-1, 1]], [[-1, -1], [-1, 0]]),
      ([[0, -1], [0, -1]], None),
      ([[0, -1], [0, 0]], None),
      ([[0, -1], [0, 1]], None),
      ([[0, -1], [1, -1]], [[-1, 1], [-1, 0]]),
      ([[0, -1], [1, 0]], [[0, 1], [-1, 0]]),
      ([[0, -1], [1, 1]], [[1, 1], [-1, 0]]),
      ([[0, 0], [-1, -1]], None),
      ([[0, 0], [-1, 0]], None),
      ([[0, 0], [-1, 1]], None),
      ([[0, 0], [0, -1]], None),
      ([[0, 0], [0, 0]], None),
      ([[0, 0], [0, 1]], None),
      ([[0, 0], [1, -1]], None),
      ([[0, 0], [1, 0]], None),
      ([[0, 0], [1, 1]], None),
      ([[0, 1], [-1, -1]], [[-1, -1], [1, 0]]),
      ([[0, 1], [-1, 0]], [[0, -1], [1, 0]]),
      ([[0, 1], [-1, 1]], [[1, -1], [1, 0]]),
      ([[0, 1], [0, -1]], None),
      ([[0, 1], [0, 0]], None),
      ([[0, 1], [0, 1]], None),
      ([[0, 1], [1, -1]], [[1, 1], [1, 0]]),
      ([[0, 1], [1, 0]], [[0, 1], [1, 0]]),
      ([[0, 1], [1, 1]], [[-1, 1], [1, 0]]),
      ([[1, -1], [-1, -1]], [[0.5, -0.5], [-0.5, -0.5]]),
      ([[1, -1], [-1, 0]], [[0, -1], [-1, -1]]),
      ([[1, -1], [-1, 1]], None),
      ([[1, -1], [0, -1]], [[1, -1], [0, -1]]),
      ([[1, -1], [0, 0]], None),
      ([[1, -1], [0, 1]], [[1, 1], [0, 1]]),
      ([[1, -1], [1, -1]], None),
      ([[1, -1], [1, 0]], [[0, 1], [-1, 1]]),
      ([[1, -1], [1, 1]], [[0.5, 0.5], [-0.5, 0.5]]),
      ([[1, 0], [-1, -1]], [[1, 0], [-1, -1]]),
      ([[1, 0], [-1, 0]], None),
      ([[1, 0], [-1, 1]], [[1, 0], [1, 1]]),
      ([[1, 0], [0, -1]], [[1, 0], [0, -1]]),
      ([[1, 0], [0, 0]], None),
      ([[1, 0], [0, 1]], [[1, 0], [0, 1]]),
      ([[1, 0], [1, -1]], [[1, 0], [1, -1]]),
      ([[1, 0], [1, 0]], None),
      ([[1, 0], [1, 1]], [[1, 0], [-1, 1]]),
      ([[1, 1], [-1, -1]], None),
      ([[1, 1], [-1, 0]], [[0, -1], [1, 1]]),
      ([[1, 1], [-1, 1]], [[0.5, -0.5], [0.5, 0.5]]),
      ([[1, 1], [0, -1]], [[1, 1], [0, -1]]),
      ([[1, 1], [0, 0]], None),
      ([[1, 1], [0, 1]], [[1, -1], [0, 1]]),
      ([[1, 1], [1, -1]], [[0.5, 0.5], [0.5, -0.5]]),
      ([[1, 1], [1, 0]], [[0, 1], [1, -1]]),
      ([[1, 1], [1, 1]], None),
      ([[1, 2, 5], [4, 1, 7], [3, 3, 7]], Div([[-14, 1, 9], [-7, -8, 13], [9, 3, -7]], 17))])
def Multiply_matrix_matrix(l, m, n, x, y):
  return([[sum([x[i][k] * y[k][j] for k in m]) for j in n] for i in l])
def Multiply_vector_matrix(m, n, x, y):
  return([sum([x[j] * y[j][i] for j in m]) for i in n])
def Multiply_vector_matrix_vector(m, n, x, y, z):
  return(Multiply_vector_vector(n, Multiply_vector_matrix(m, n, x, y), z))
def Multiply_vector_vector(n, x, y):
  return(sum([x[i] * y[i] for i in n]))
def Powers(m, n, x):
  Result = [None for _ in range(n)]
  if n != 0:
    Result[0] = x
    for i in range(1, n):
      Result[i + 1] = Multiply_matrix_matrix(m, m, m, x, Result[i])
  return(Result)
def Test(f, Test_cases):
  print(f.__name__)
  for (x, y) in Test_cases:
    z = deepcopy(x)
    w = f(x)
    if w != y:
      print((z, y, w))
def Tests():
  for (f, Test_cases) in Functions():
    for g in f:
      Test(g, Test_cases)
Tests()
#############################################################################################################################